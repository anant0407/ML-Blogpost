{
  "hash": "b946f4af280ef3be7beaad67725c70b9",
  "result": {
    "markdown": "---\ntitle: \"A Beginner's Guide to Linear and Nonlinear Regression\"\ntitle-block-banner-color: white\nauthor: \"Anant Sharma\"\ndate: \"2023-11-29\"\ncategories: [news, code, analysis]\nimage: \"regression.jpeg\"\n---\n\n### Introduction:\n\nRegression analysis is a cornerstone of machine learning, providing the tools to model and understand the relationships between variables. In this blog, we will explore the twin realms of linear and nonlinear regression, uncovering their principles, applications, and the nuanced art of fitting curves to data.\n\n### Understanding Regression:\n\nAt its core, regression is a statistical method that examines the relationship between a dependent variable (output) and one or more independent variables (inputs). The goal is to create a model that captures and quantifies these relationships, enabling predictions and insights.\n\n#### Types of Regression:\n   \n2. **Nonlinear Regression:**\n  \n\n### Linear Regression:\n   - Linear regression assumes a linear relationship between the independent variables and the dependent variable. The model represents this relationship with a straight line equation (y = mx + b), where \"m\" is the slope, and \"b\" is the intercept.\n\n   To practice, we'll generate a synthetic dataset so that its easier for you to follow along.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import necessary libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Generate synthetic data for linear regression\nnp.random.seed(42)\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X + np.random.randn(100, 1)\n```\n:::\n\n\n   Now, as usual, we'll split the data into 2 sets, for training and testing.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a linear regression model\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n   Now, we make the predictions and evaluate the model\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Make predictions on the test set\ny_pred = lin_reg.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Visualize the regression line and test set\nplt.scatter(X_test, y_test, color='black', label='Actual Data')\nplt.plot(X_test, y_pred, color='blue', linewidth=3, label='Linear Regression Line')\nplt.title('Linear Regression Example')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n# Display evaluation metrics\nprint(f'Mean Squared Error: {mse:.2f}')\nprint(f'R-squared: {r2:.2f}')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=585 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 0.65\nR-squared: 0.81\n```\n:::\n:::\n\n\n   The goal of linear regression is to find the best-fit line that minimizes the difference between the predicted and actual values, often measured using the least squares method.\n#### Applications:\n   - **Predictive Modeling:** Linear regression is widely used for predicting numerical outcomes, such as sales forecasting or stock price predictions.\n   - **Trend Analysis:** It helps identify trends and understand the strength and direction of relationships between variables.\n\n### Nonlinear Regression:\n\n - Nonlinear regression, on the other hand, acknowledges that the relationship between variables may not be a straight line. It allows for more complex, curved, or non-linear relationships to be captured in the model.\n\nWe'll follow similar procedure as linear regression here but with a few minor changes\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Import necessary libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Generate synthetic data for non-linear regression\nnp.random.seed(42)\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X + 1.5 * X**2 + np.random.randn(100, 1)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Polynomial regression with a quadratic term\ndegree = 2\npoly_reg = make_pipeline(PolynomialFeatures(degree), LinearRegression())\npoly_reg.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = poly_reg.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Visualize the regression curve and test set\nX_range = np.linspace(0, 2, 100).reshape(-1, 1)\ny_range_pred = poly_reg.predict(X_range)\n\nplt.scatter(X_test, y_test, color='black', label='Actual Data')\nplt.plot(X_range, y_range_pred, color='blue', linewidth=3, label='Quadratic Regression Curve')\nplt.title('Non-Linear Regression Example (Quadratic)')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n# Display evaluation metrics\nprint(f'Mean Squared Error: {mse:.2f}')\nprint(f'R-squared: {r2:.2f}')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=585 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 0.64\nR-squared: 0.95\n```\n:::\n:::\n\n\n   Non-linear regression is a powerful tool for capturing complex relationships in data. By incorporating polynomial terms, non-linear regression models can adapt to more intricate patterns. It's essential to strike a balance to avoid overfitting, and techniques such as regularization can be employed. Experimenting with different degrees of polynomials allows for flexibility in modeling non-linear relationships in various datasets.\n\n#### Applications:\n   - **Biology and Medicine:** Nonlinear regression is employed to model growth curves, drug response curves, and other biological phenomena.\n   - **Economics:** It is used to model complex economic relationships that may exhibit nonlinearity.\n   - **Physics:** Nonlinear regression is crucial for fitting models to physical processes where linear relationships may not hold.\n\n### Challenges and Considerations:\n\n1. **Overfitting:**\n   - Nonlinear models can be prone to overfitting, capturing noise in the data rather than true underlying patterns.\n\n2. **Interpretability:**\n   - Linear regression models offer straightforward interpretability, while the interpretation of nonlinear models may be more complex.\n\n### Conclusion:\n\nIn the vast landscape of machine learning, the twin siblings of linear and nonlinear regression stand as versatile tools for modeling relationships within data. Whether capturing the simplicity of a straight line or embracing the complexity of curved relationships, regression analysis remains a linchpin for extracting meaningful insights and making informed predictions in the ever-evolving world of data science.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}